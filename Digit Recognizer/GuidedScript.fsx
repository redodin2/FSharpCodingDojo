// Здравствуйте!
// Прекрасно, что вы решили поучаствовать в F# Coding Dojo!
// Этот файл подготовлен и русифицирован Дмитрием Сошниковым (dmitri@soshnikov.com)
// на основе шаблона https://github.com/c4fsharp/Dojo-Digits-Recognizer/blob/master/Dojo/GuidedScript.fsx 

// 1. ЧИТАЕМ ФАЙЛ

// Открываем библиотеки
// Чтобы код дальше работал, надо выполнить эти строчки в F# Interactive
// (выделить эти строчки и нажать Alt-Enter)
  
open System
open System.IO

// Используйте функцию .NET-библиотеки
// File.ReadAllLines(path)
// которая возвращает массив строк
// Возможно, придется прописать полный путь к файлу
 
// [ YOUR CODE GOES HERE! ]
 
 
// 2. ИЗВЛЕКАЕМ КОЛОНКИ
 
// Используйте Array.map, чтобы разбить каждую строчку на колонки
// В виде массива колонок
 
// Может пригодится следующий пример:
let csvToSplit = "1,2,3,4,5"
let splitResult = csvToSplit.Split(',')
 
 
// [ YOUR CODE GOES HERE! ]
 
 
// 3. УБИРАЕМ ЗАГОЛОВОК
 
// Подсказка: используйте array slicing operators для массивов
let someNumbers = [| 0 .. 10 |] 
let first = someNumbers.[0] 
let twoToFive = someNumbers.[ 1 .. 4 ]
let upToThree = someNumbers.[ .. 2 ] 

// [ YOUR CODE GOES HERE! ]
 
 
// 4. ПРЕОБРАЗУЕМ В ЦЕЛЫЕ
 
// В наших массивах содержатся строки. Давайте преобразуем их в целые числа
// Пример преобразования строки в число:
let castedInt = (int)"42"
let convertedInt = Convert.ToInt32("42")
let funnyCast = "42" |> int 
 
// [ YOUR CODE GOES HERE! ]
 
 
// 5. ПРЕОБРАЗУЕМ МАССИВЫ В ЗАПИСИ
 
// Для удобства будем использовать записи для хранения информации об одной цифре
// Используйте вот такой тип:
type Example = { Label:int; Pixels:int[] }
// Экземпляры записей создаются следующим образом:
let example = { Label = 1; Pixels = [| 1; 2; 3; |] }
 
// [ YOUR CODE GOES HERE! ]
 
 
// 6. ВЫЧИСЛЯЕМ РАССТОЯНИЯ
 
// Нам надо научиться вычислять расстояние между изображениями
// Напоминалка: Эвклидово расстояние вычисляется так
// distance [ x1; y1; z1 ] [ x2; y2; z2 ] = 
// sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) + (z1-z2)*(z1-z2))
// Подсказка: для нахождения ближайшей точки (минимального расстояния)
// вычисление корня не принципиально

// Вам может пригодится функция Array.map2
// Например, вот так она используется для вычисления суммы двух массивов-векторов:
let point1 = [| 0; 1; 2 |]
let point2 = [| 3; 4; 5 |]
let map2Example = 
    Array.map2 (fun p1 p2 -> p1 + p2) point1 point2

// Можно легко преобразовать это в функцию
let map2PointsExample (P1: int[]) (P2: int[]) =
    Array.map2 (fun p1 p2 -> p1 + p2) P1 P2


// Определите функцию, вычисляющую расстояние между пиксельными изображениями
let distance (p1: int[]) (p2: int[]) = 42
 
// [ YOUR CODE GOES HERE! ]
 
 
// 7. РЕАЛИЗУЕМ КЛАССИФИКАТОР
 
// Мы готовы к тому, чтобы написать классификатор!
// Нам пригодится функция Array.minBy 
// которая находит в массиве минимальный элемент по некоторому критерию
// Например, пусть у нас есть массив:
let someData = 
    [| { Label = 0; Pixels = [| 0; 1 |] };
       { Label = 1; Pixels = [| 9; 2 |] };
       { Label = 2; Pixels = [| 3; 4 |] }; |]
// Например, найдем элемент с максимальным первым пикселем
let findThatGuy = 
    someData 
    |> Array.maxBy (fun x -> x.Pixels.[0])
 
// F# хорошо работает с замыканиями, например
let immutableValue = 42
let functionWithClosure (x: int) =
    if x > immutableValue // используем значение извне функции
    then true
    else false
 
// Классификатор должен получать на вход массив пикселей
// и возвращать распознанную цифру
let classify (unknown:int[]) =
    // тут надо сделать что-то умное
    // например найти в массиве обучающих примеров TrainingSample
    // элемент с минимальным расстоянием до unknown
    // используя замыкание...
    0 
 
// [ YOUR CODE GOES HERE! ]
 
 
// 8. ПРОВЕРЯЕМ ТОЧНОСТЬ МОДЕЛИ
 
// Давайте вычислим процент правильно распознанных цифр для 500
// тестовых данных из файла validationsample.csv. 
 
// [ YOUR CODE GOES HERE! ]

// 9. ПОЗДРАВЛЯЕМ!
// Что можно сделать дальше:
// - загрузить из http://www.kaggle.com/c/digit-recognizer полный файл с 50000 примерами
//   с такой обучающей выборкой распознавание будет происходить очень долго. Придумайте способ
//   существенно ускорить распознавание за счет использования хитрой структуры данных
// - посмотрите, улучшилась ли точность на большой выборке
// - построить цифры из обучающих примеров с помощью System.Drawing и посмотреть, как они выглядят
// - встроить распознаватель в приложение (или облачный сервис), которое будет позволять написать цифру
//   на touch-экране и распознавать её
// - научиться распознавать почерк врачей
